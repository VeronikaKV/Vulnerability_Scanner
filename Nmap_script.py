import nmap
import sys
import os, json
import re, requests
from pymongo import MongoClient


client = MongoClient('localhost', 27017)
db = client['DataCVE']
collection_NVD= db['NVD']
collection_BDU = db['BDU']
collection_OVAL_ORACLE = db['OVAL_ORACLE']
collection_AMAZON = db['AMAZON']

a='.\.'
a=a.replace(".", "")
Cpe_Mas=[]
cve_n=[]

def nmap_A_scan(network_prefix):
    nm = nmap.PortScanner()
    scan_raw_result = nm.scan(hosts=network_prefix, arguments='-v -n -A')
    for host, result in scan_raw_result['scan'].items():
        if result['status']['state'] == 'up':
            print('+' * 25 + '   Host:' + host + '   '+'+' * 25+'\n')
            for os in result['osmatch']:
                print("OC:   " + os['name'] + ' ' * 3 + "Probability:" + os['accuracy']+'\n')
            idno = 1
            try:
                for port in result['tcp']:
                    try:
                        print('_' * 25 + "TCP-server" + '[' + str(idno) + ']' + '_' * 25 + '\n')
                        idno += 1
                        print('Port number TCP:' + str(port) + '   ' + result['tcp'][port]['state'] + '   ' + result['tcp'][port]['reason'] )
                        try:
                            print('CPE：' + result['tcp'][port]['cpe']+' '+result['tcp'][port]['version'])
                            CPE_i = (result['tcp'][port]['cpe'])
                            if CPE_i in Cpe_Mas:
                                print("Vulnerability data for this software is already shown!")
                            else : 
                                cve_vuln(result['tcp'][port]['cpe'], result['tcp'][port]['version'])
                                print('')
                                Cpe_Mas.append(CPE_i)

                        except:
                            pass
                    except:
                        pass
            except:
                pass

            idno = 1
            try:
                for port in result['udp']:
                    try:
                        print('-' * 17 + "UDP-server" + '[' + str(idno) + ']' + '-' * 17)
                        idno += 1
                        print('Port number UDP:' + str(port) + "   " + result['udp'][port]['state']+ '   ' +result['udp'][port]['reason'])
                        try:
                            print('CPE：' + result['udp'][port]['cpe'])
                            CPE_i = str((result['udp'][port]['cpe']))
                            if CPE_i in Cpe_Mas:
                                print("Vulnerability data for this software is already shown!")
                            else : 
                                cve_vuln(result['tcp'][port]['cpe'], result['tcp'][port]['version'])
                                print('')
                                Cpe_Mas.append(CPE_i)
                        except:
                            pass
                    except:
                        pass
            except:
                pass


def cve_vuln(_cpe, ver):

    response = requests.get('https://vulners.com/api/v3/burp/software/?software=%s&version=%s&type=cpe' % (_cpe, ver)) 
    j_inf=json.loads(response.text)

    for i in range(len(j_inf['data']['search'])): 
        CVE_=(j_inf['data']['search'][i]['_source']['id'])
        ty_p=j_inf['data']['search'][i]['_source']['type']
        if CVE_ in cve_n:
            print(str(CVE_)+"  Vulnerability data for this software is already shown!")
        else:
            cve_n.append(CVE_)


        print("\033[1m\033[36m{}\033[0m".format(CVE_) + '\n')

        try:
            
            for men in collection_NVD.find({"cve.CVE_data_meta.ID": CVE_}).sort("cve.CVE_data_meta.ID",-1).limit(10):

                print("\033[2m\033[36m{}\033[0m".format("Vulnerability information:   \n")+men["cve"]["description"]["description_data"][0]["value"] )
        except:
            pass
        try:
            for Oval in collection_OVAL_ORACLE.find({"$text": {"$search": "\"%s\"" % CVE_}}):
                print("\033[2m\033[36m{}\033[0m".format("ORACLE:   ") + Oval["Title"])
        except:
            pass
        try:    
            for bdu_1 in collection_BDU.find({"$text": {"$search": "\"%s\"" % CVE_}}):
                print("\033[2m\033[36m{}\033[0m".format(bdu_1["iden"]) + '\n' + bdu_1["URI_i"])
        except:
            pass
        try:    
            for AMAZ_ in collection_AMAZON.find({"cveids": "%s" % CVE_}):
                print("\033[2m\033[36m{}\033[0m".format("AMAZON:   ") + AMAZ_["Title"])
        except:
            pass


        if j_inf['data']['search'][i]['_source']['bulletinFamily'].lower() == "exploit":
            exploit =('https://vulners.com/%s/%s' %(ty_p, CVE_)) 
            print("\033[2m\033[36m{}\033[0m".format("EXPLOIT:" + exploit))
        print('')

    
   
def cmd_d(ip_, host_):

    nm = nmap.PortScanner()
    scan_raw_result = nm.scan(hosts=host_, arguments=ip_)
    for host, result in scan_raw_result['scan'].items():
        try:
            for port in result['tcp']:
                try:
                    for skrip in result['tcp'][port]['script']:
                        print( '\n'+'Port: '+str(port)+'  '+skrip +":\n"+ result['tcp'][port]['script'][skrip]) 
                except:
                    print('No result!')
                    pass   
        except:
            pass
            

if __name__ == '__main__':

    ip_st = str(input('\n'"Enter IP:   "))
    print('')
    #192.168.0.100
    nmap_A_scan(ip_st)
    print("\nVulnerabilities found:   " +  str(len(cve_n)))
    http_phpself_xss ='-sV --script http-phpself-xss.nse ' 
    http_form_fuzzer = '-sV --script http-form-fuzzer.nse ' 
    Faz = str(input('\n'"Start fuzzer? [Y/N]:   "))
    if Faz == 'Y' or Faz == 'y':
        try:
            print('\n'+"http_phpself_xss")
            cmd_d(http_phpself_xss, ip_st)
        except:
            pass
        try:
            print('\n'+"http-form-fuzzer")
            cmd_d(http_form_fuzzer, ip_st)
        except:
            pass
    


